#!/usr/bin/env node

var fs = require('fs');
var optimist = require('optimist');
var html2js = require('../src/html2js');
var bundler = require('../src/bundler');
var glob = require("glob")

var argv = optimist.usage('Usage: $0 <input file> [<input file> ...] [options]')
  // -o, --outfile option
  .alias('o', 'outfile')
  .string('o')
  .describe('o', 'Writes the result into the outfile instead of stdout')
  // -m, --module option
  .alias('m', 'module')
  .string('m')
  .describe('m', 'If module name is provided, templates will be packaged under this module.')
  // -b, --basedir option
  .alias('b', 'basedir')
  .string('b')
  .describe('b', 'If basedir is provided, basedir will be removed from the templates\' path.')
  // --browserify option
  .boolean('browserify')
  .describe('browserify', 'Compiled templates will use module.exports')
  // -h, --help option
  .alias('h', 'help')
  .boolean('h')
  .describe('h', 'Shows usage message; what you are looking at.')
  // -t, --test option
  .alias('d', 'dependencies')
  .string('d')
  .describe('d', 'Path to dependent files, which will be imported via es6 "import".')
  .argv;

if (argv._.length === 0 || argv.help) {
  console.log(optimist.help());
  process.exit();
}

var resolveFilename = function (filename, basedir) {
  filename = basedir ? filename.replace(basedir, '') : filename;
  return filename.replace(/\\/g, '/');
};

// IO options
var outfile = argv.o;
var basedir = argv.b;
var bundle = argv.bundle;
var globs = argv._;

if (globs.length > 1) {
  bundle = true;
}

// Transform options
var options = {
  module: argv.m,
  browserify: argv.browserify,
  bundle: true
};

var output = '', templateContent, templateURL;
var fileNames = [];

for (var i in globs) {

  fileNames = fileNames.concat(glob.sync(globs[i], {
    cwd: basedir
  }));
}

fileNames.forEach(function (fileName) {

  templateURL = fileName;
  templateContent = fs.readFileSync(basedir + '/' + fileName, 'utf8');
  output += html2js(templateURL, templateContent, options);
});

output = bundler(output, options);

if(argv.d) {

  var dependencies = [].concat(argv.d);
  var dependencyStr = '';
  dependencies.forEach(function(path) {

    dependencyStr += 'import "' + path + '"; ';
  });

  output = dependencyStr + output;
}

if (outfile) {
  fs.writeFileSync(basedir + '/' + outfile, output, 'utf8');
} else {
  console.log(output);
}
